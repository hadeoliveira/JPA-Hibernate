JPA é a especificação do ORM, que relaciona o OO ao mundo relacional do banco de dados. Hibernate é a implementação.
Na pasta META-INF, temos um arquivo persistence.xml para configurar nossa JPA
Hibernate é uma biblioteca (implementação) para podermos fazer comunicação com o BD sem usar JDBC
Pensar em um Persistence Unit como um banco de dados. Cada persistence unit é um banco de dados. JTA é banco remoto de aplicação. Servidor controla a transação para mim
RESOURCE_LOCAL é standalone e local. Ele não controla transação. Precisamos iniciar no código

O property tem configurações de nome e valor

hibernate.dialect é para o hibernate saber as particularidades do banco de dados. Uma forma do hibernate saber conversar com o banco de dados 
A tag persistence é a tag raiz

ORM é a ideia de fazer o mapeamento objeto-relacional

Mapeando, ensinando para JPA os nomes corretos das minhas entidades. Ensinando que minha classe tem uma tabela, as colunas.
Fora todo mapeamento da classe-entidade, precisamos mapear no persistence.xml com a tag class, com exceção do hibernate. Outras implementações precisa colocar o class

Entidade JPA é uma classe que faz o mapeamento de uma tabela do banco de dados

Usando Categoria fixa...
Supondo que tenho uma categoria fixa de produtos, sendo CELULARES, INFORMATICA e LIVROS. O ideal é mapear essa categoria como Enum. Como o JPA manda para o banco de dados? ele manda a posição do enum, sendo 1, 2 ou 3. No entanto, se alguém trocar as constantes, pode ser um problema. É arriscado mapear por numero. Tudo que não é default/convenção, deve ser configurado. Ou seja, o mais seguro é o JPA fazer o mepeamento por nome. Então colocamos @Enumerated(EnumType.STRING). Se for por numero, poderia ser deixado como ORDINAL

Como remapeamos a Categoria para uma entidade, como o Produto já tem um atributo de categoria, o JPA já entende como relacionamento. No entanto, precisamos mapear a cardinalidade porque o JPA não entende. Se quisermos inputar um valor na base, esse valor deve já existir. Por exemplo, quero inputar um produto que tem uma FK. Essa FK (que é uma tabela de dominio) já deve existir na base. Caso contrário, dará o erro de "TransientPropertyValueException: object references an unsaved transient instance"

CICLO DE VIDA DAS ENTIDADES - JPA
Transient: Nao iniciada, nao foi persistida, JPA nao ta gerenciando e nao conhece
Managed: É o principal estado que a entidade pode estar. Pode sincronizar com o banco de dados. JPA esta de olho nessa entidade no momento do persist
flush() antes de comitar, já sincroniza com o banco de dados
DETACHED: após o close() ou clear() é um estado destacado. Já tá salvo no BD, mas o JPA nao esta monitorando mais

JPA precisa que as entidades tenham um construtor default. Quando é feito um merge(), a JPA carrega aquela entidade do banco de dados, ou seja, é feito um select. Com isso, é necessário um construtor padrão apontando para uma outra região da memória

Quando um registro já está no banco de dados e nao está mais no detached, usamos um find() ou createQuery() 

Um estavo que faltou foi o DELETED. Em um estado MANAGED, chamo o remove() e ele exclui aquele objeto do banco e já faz um flush para sincronizar com o banco e disparar o delete para o banco

:atributo no JPQL -> named parameter

?1 -> posição do parametro

No JPQL, fazemos o from pela entidade

entityManager.createQuery(jpql, Produto.class).getResultList()

Até o createQuery é só feita a formação da query. o getResultList é o que executa e faz o select e traz em formato de lista
Se eu quiser trazer um único resultado, usaria o getSingleResult


RELACIONAMENTO BIDRECIONAL
Fazer a atualização nas duas tabelas envolvidas com o parâmetro Cascade. O uso do Cascade faz com que a JPA identifique que um atributo deve ser salvo dependente de outro. Então se um pedido for adicionado, ele vai fazer a mesma operação em ItemPedido.
No parâmetro mappedBy, que existe na annotation OneToMany, indicamos qual o atributo que está mapeando na outra entidade. Precisamos indicar o atributo do outro lado que está mapeando.
Caso não precisamos de mais colunas para indicar o mapeamento bidirecional, podemos apenas efetuar um JoinTable

Dicas JPQL
Lembrar de ser o nome da entidade ao invés da tabela
Para trazer um relatório, é possível trazer através de uma lista de um array de Object, para caso sejam objetos muito diferentes.
No caso de ser instanciado um objeto vo, é utilizado um select new caminho da classe + nome da classe (...). Lembrando que, para usar select new, a classe VO deve possuir os construtores que serão retornados na query. Um objeto VO significa um objeto de Value Object, que é uma classe com construtor, atributos, getters e setters. Deve ser select new porque o select só aceita se o objeto do caso fosse uma entidade.

Named query: extrair as consultas da DAO na própria entidade. Para isso, em cima da entidade, usa-se uma anotação @NamedQuery(name = "nomeDaQuery", query = "QUERY AQUI") -> fica um pouco poluído
entityManager.createNamedQuery("Produto.produtosPorCategoria", Produto.class) -> geralmente, a notação é: <de qual entidade vem>.<Nome da categoria>, objeto de retorno

Quando criamos entidades relacionadas, é normal o JPQL fazer o relacionamento entre tabelas para fazer suas buscas
Todo relacionamento ..ToOne, são carregados automaticamente, mesmo que não queremos buscar nenhuma informação do atributo relacionado.
Já os ...ToMany não são carregados automaticamente, porque geralmente são vinculados a uma lista.

Estratégia como a JPA carrega os elementos em memória. Muitas vezes, carregamos entidades não são necessárias na JPQL

Por padrão, quando a JPA vê que tem camel case, a JPA separa aquele atributo com underline:
private BigDecimal valorTotal; // Esse atributo será valor_total na tabela de pedidos

Se eu quisesse fazer um mapeamento ManyToMany simples, usaria um @JoinTable. No caso que estamos vendo, um pedido pode ter muitos produtos e um produto pode estar em vários pedidos
Eu preciso de uma tabela intermediária chamada itens_pedido pois preciso saber qual é a quantidade daquele item e guardar um histórico do valor correto no momento da compra. Por isso, é necessário uma nova entidade.

Dica de quando usar lista, é sempre iniciar a lista

JPA tem dois comportamentos:
EAGER -> toOne, padrão é carregar antes. Carregamento antecipado.
LAZY -> carregar tardio, só se for necessário alguma informação dessa lista

...toMany nao é carregado automaticamente porque pode ser pesado para a memória, pois pode se tratar de lista. Portanto, só é acessado se for pedido.

BOA PRÁTICA
Todo relacionamento ..toOne, colocar
@..ToOne(fetch - FetchType.LAZY) para não onerar aplicação

O efeito colateral é possivelmente o entity manager estar fechado ao chamar uma informação, como acontece em API's. Exception famosa: LazyInicializationException

A ideia é o uso da QUERY PLANEJADA
        // JOIN FETCH esta falando que nessa consulta já é para ser carregado o cliente e
        // nessa consulta é comportado como EAGER. Nessa consulta o cliente vem com o Pedido

Cada entidade é mapeada para uma tabela no banco de dados. Desenvolver a entidade no Java e depois faça os devidos relacionamentos.

Fazer consulta dinâmica, ou seja, fazer uma query definida com nome, preço e data apenas pelo(s) atributo(s) que for(em) passado(s), só pode ser feito com um emaranhado de if's. Por conta disso, a JPA possui a Criteria API

A Criteria API nao utiliza JPQL. Precisamos do entity manager, que consegue criar um objeto Criteria para realizarmos a busca. Fazemos um getCriteriaBuilder()
Explicação do que foi feito
        CriteriaBuilder builder = entityManager.getCriteriaBuilder();
        CriteriaQuery<Produto> query = builder.createQuery(Produto.class);
        Root<Produto> from = query.from(Produto.class);
        Predicate filtros = builder.and();
- É utilizado um objeto CriteriaBuilder para poder executar as operações com Criteria
- Query vai disparar o select, from, where, etc. O from utiliza de onde vai ser disparado o from. Ou seja, estou dizendo "Criteria, o from é de Produto". SELECT p FROM Produto p
- Se você setar o from, o select é setado automaticamente. O retorno do from é um objeto do tipo Root<Produto>
- o builder tem outro recurso, que é o and. Esse objeto é do tipo Predicate

API CRITERIA é bem complexa e com código difícil de entender

@Embeddable: Classe embutível. Quando eu quero separar da entidade principal colunas da tabela e falar que aquelas colunas da entidade são um outro tipo objeto.
Na entidade, o atributo utiliza a anotação @Embeddded

Mapeamento de herança na JPA
Uma alternativa é a Single Table: Por mais que no Java tenhamos diferentes produtos, é tratado contra um grande tabelão, no qual todos os atributos ficam alocados na tabela. A desvantagem é que fica tudo na mesma tabela. A vantagem é que é mais performático.
Para usar o Single Table, colocar uma anotação em cima da classe produto
@Inheritance(strategy = InheritanceType.SINGLE_TABLE) -> lembrando que, as classes que fizeram herança, devem ter o @Entity da javax.persistence

A outra estratégia é a JOINED. Você não tem uma tabela gigante, e sim uma tabela por classe. É utilizado chave estrangeira. A vantagem é a organização e a desvantagem é que, caso eu faça um select na tabela de Livro, ele fará um Join com a tabela de Produto, o que pode diminuir a performance da busca. Com a inserção, é feita na tabeça de produto e na de Livros, no qual o id do livro é uma chave estrangeira